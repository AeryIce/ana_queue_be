generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== ENUM =====
 */
enum TicketStatus {
  QUEUED
  CALLED
  IN_PROCESS
  DONE
  DEFERRED
  NO_SHOW
}

/**
 * ===== MODELS =====
 */
model Event {
  id           String         @id @default(uuid())
  name         String
  startsAt     DateTime?
  endsAt       DateTime?
  tickets      Ticket[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  QueueCounter QueueCounter[]
}

model Ticket {
  id        String       @id @default(uuid())
  code      String       @unique // contoh: AH-101
  name      String
  status    TicketStatus @default(QUEUED)
  order     Int
  eventId   String
  event     Event        @relation(fields: [eventId], references: [id])
  callLogs  CallLog[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // NEW (nullable dulu agar migrasi aman ke data lama)
  email String? // lowercase, untuk kuota per email
  wa    String? // opsional

  @@index([eventId, status, order])
  @@index([eventId, email])
}

model Counter {
  id        String    @id @default(uuid())
  name      String    @unique
  callLogs  CallLog[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CallLog {
  id        String   @id @default(uuid())
  ticketId  String
  counterId String
  calledAt  DateTime @default(now())
  note      String?

  ticket  Ticket  @relation(fields: [ticketId], references: [id])
  counter Counter @relation(fields: [counterId], references: [id])
}

model MasterUser {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique // simpan lowercase
  quota     Int      @default(1)
  createdAt DateTime @default(now())
}

/**
 * ===== COUNTER ATOMIK UNTUK NOMOR BERURUTAN =====
 */
model QueueCounter {
  eventId   String @id
  nextOrder Int    @default(1) // nomor antrian berikutnya untuk event ini

  event Event @relation(fields: [eventId], references: [id])

  @@map("queue_counters")
}

// === ENUM status permintaan registrasi (meja panitia)
enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// === Semua submit form masuk sini (grid panitia)
model RegistrationRequest {
  id      String             @id @default(uuid())
  eventId String
  email   String
  name    String
  wa      String?
  source  String             @default("MASTER") // MASTER | WALKIN | GIMMICK
  status  RegistrationStatus @default(PENDING)

  // metadata validasi (opsional)
  isMasterMatch Boolean? // true jika email ada di MasterUser
  masterQuota   Int? // kuota dari master
  issuedBefore  Int? // tiket yang sudah pernah diambil email ini

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId, status, createdAt])
}

// === Buku besar sisa-kuota (transparan & diaudit)
model SurplusLedger {
  id           String   @id @default(uuid())
  eventId      String
  type         String // "DONATE" | "ALLOCATE"
  email        String // donor atau penerima
  amount       Int // selalu positif
  refRequestId String? // optional: jejak request yang memicu
  createdAt    DateTime @default(now())

  @@index([eventId, createdAt])
}
